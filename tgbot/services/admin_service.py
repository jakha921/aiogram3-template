from typing import List, Dict, Any, Optional
from datetime import datetime
from loguru import logger
from tgbot.services.base_service import BaseService
from tgbot.services.cache_service import cache_service


class AdminService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    async def get_users_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from tgbot.models.models import TGUser
        return await self.safe_execute(
            "get_users_count",
            TGUser.get_users_count,
            self.db
        )
    
    async def get_invoices_by_period(self, year: int, month: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from tgbot.models.models import TGUser
        cache_key = f"admin_invoices_{year}_{month}"
        return await self.get_cached_data(
            cache_key,
            lambda: TGUser.get_sales_invoices_by_period(self.db, year, month),
            ttl_seconds=600
        )
    
    async def get_invoice_details(self, sales_id: int) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from tgbot.models.models import TGUser
        cache_key = f"admin_invoice_details_{sales_id}"
        return await self.get_cached_data(
            cache_key,
            lambda: TGUser.get_sales_document_details(self.db, sales_id),
            ttl_seconds=300
        )
    
    async def get_reconciliation_data(self, phone: str, year: int, month: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from tgbot.models.models import TGUser
        cache_key = f"admin_reconciliation_{phone}_{year}_{month}"
        return await self.get_cached_data(
            cache_key,
            lambda: TGUser.get_customer_sales_summary(self.db, phone, year, month),
            ttl_seconds=600
        )
    
    async def get_sales_years(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–¥–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from tgbot.models.models import TGUser
        return await self.get_cached_data(
            "admin_sales_years",
            lambda: TGUser.get_sales_years(self.db),
            ttl_seconds=3600
        )
    
    async def get_sales_months(self, year: int) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∑–∞ –≥–æ–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from tgbot.models.models import TGUser
        cache_key = f"admin_sales_months_{year}"
        return await self.get_cached_data(
            cache_key,
            lambda: TGUser.get_sales_months(self.db, year),
            ttl_seconds=3600
        )
    
    async def get_customers_by_period(self, year: int, month: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from tgbot.models.models import TGUser
        cache_key = f"admin_customers_{year}_{month}"
        return await self.get_cached_data(
            cache_key,
            lambda: TGUser.get_customers_by_period(self.db, year, month),
            ttl_seconds=1800
        )
    
    async def get_all_customers_with_sales(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –ø—Ä–æ–¥–∞–∂–∏"""
        from tgbot.models.models import TGUser
        from sqlalchemy import text
        async def _get_all_customers():
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É)
            async with self.db() as session:
                stmt = text("""
                    SELECT DISTINCT 
                        c.cstm_id as id,
                        c.cstm_name as name,
                        c.cstm_phone as phone
                    FROM doc_sales AS s 
                    JOIN dir_customers AS c ON s.sls_customer = c.cstm_id
                    WHERE s.sls_performed = 1 AND s.sls_deleted = 0
                    ORDER BY c.cstm_name
                """)
                result = await session.execute(stmt)
                return [row._asdict() for row in result.fetchall()]
        
        return await self.get_cached_data("all_customers", _get_all_customers, ttl_seconds=3600)
    
    def format_invoice_summary(self, invoices: List[Dict[str, Any]], year: int, month: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
        if not invoices:
            return f"‚ùå –ó–∞ {month}/{year} –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        total_sum = sum(invoice['–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏'] for invoice in invoices)
        return (
            f"üì¶ <b>–ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ {month}/{year}</b>\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(invoices)} –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {self.format_currency(total_sum)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
    
    def format_invoice_details(self, details: List[Dict[str, Any]], sales_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π"""
        if not details:
            return "‚ùå –î–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        first_item = details[0]
        header = (
            f"üìã <b>–ù–∞–∫–ª–∞–¥–Ω–∞—è #{sales_id}</b>\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {first_item['–ú–∞–≥–∞–∑–∏–Ω/–°–∫–ª–∞–¥']}\n"
            f"üìÖ –î–∞—Ç–∞: {self.format_date(first_item['–î–∞—Ç–∞/–í—Ä–µ–º—è'])}\n\n"
            f"<b>üì¶ –¢–æ–≤–∞—Ä—ã:</b>\n"
        )
        
        items_text = []
        total_sum = 0
        
        for item in details:
            item_total = item['–°—É–º–º–∞']
            total_sum += item_total
            
            items_text.append(
                f"‚Ä¢ <b>{item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}</b>\n"
                f"  –ö–æ–¥: {item['–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞']}\n"
                f"  –ö–æ–ª-–≤–æ: {item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
                f"  –¶–µ–Ω–∞: {self.format_currency(item['–¶–µ–Ω–∞'])}\n"
                f"  –°—É–º–º–∞: {self.format_currency(item_total)}"
            )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(items_text) > 10:
            displayed_items = items_text[:10]
            displayed_items.append(f"\n... –∏ –µ—â–µ {len(items_text) - 10} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            displayed_items = items_text
        
        footer = f"\n\nüí∞ <b>–ò—Ç–æ–≥–æ: {self.format_currency(total_sum)}</b>"
        
        full_text = header + "\n\n".join(displayed_items) + footer
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
        if len(full_text) > 4000:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            short_items = items_text[:5]
            short_items.append(f"\n... –∏ –µ—â–µ {len(items_text) - 5} —Ç–æ–≤–∞—Ä–æ–≤")
            full_text = header + "\n\n".join(short_items) + footer
        
        return full_text
    
    def format_reconciliation_text(self, summary: List[Dict[str, Any]], customer_name: str, year: int, month: int, customer_phone: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –¥–ª—è UX –∫–∞–∫ —É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
        max_rows = 10
        docs_shown = summary[:max_rows]
        total_debt = sum(float(row.get('–î–æ–ª–≥', 0) or 0) for row in summary)
        total_sum = sum(float(row.get('–°—É–º–º–∞', 0) or 0) for row in summary)
        period_str = f"{month:02d}/{year}"
        phone_str = f" ({customer_phone})" if customer_phone else ""
        header = (
            f"üìÑ <b>–ê–∫—Ç —Å–≤–µ—Ä–∫–∏ –∑–∞ {period_str}</b>\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{customer_name}{phone_str}</b>\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(summary)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{self.format_currency(total_sum)}</b>\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –¥–æ–ª–≥: <b>{self.format_currency(total_debt)}</b>\n"
        )
        if len(summary) > max_rows:
            header += f"\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_rows} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."
        header += "\n(–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –≤ Excel)"
        return header
    
    async def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        await cache_service.clear()
        logger.info("Cache cleared")
    
    async def invalidate_invoice_cache(self, year: int = None, month: int = None) -> None:
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
        if year and month:
            key = cache_service._generate_key("invoices", year=year, month=month)
            await cache_service.delete(key)
        else:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏
            keys_to_delete = []
            for key in cache_service._cache.keys():
                if key.startswith("invoices_"):
                    keys_to_delete.append(key)
            
            for key in keys_to_delete:
                await cache_service.delete(key)
        
        logger.info(f"Invoice cache invalidated for year={year}, month={month}")

    def filter_reconciliation_data_by_period(self, summary: list, year: int, month: int) -> list:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É"""
        return [row for row in summary if hasattr(row['–î–∞—Ç–∞'], 'year') and row['–î–∞—Ç–∞'].year == year and row['–î–∞—Ç–∞'].month == month]

    def get_reconciliation_excel_params(self, customer_name: str, year: int, month: int, filtered_summary: list) -> dict:
        """–ì–æ—Ç–æ–≤–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Excel-–∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏"""
        company1 = "AVTOLIDER"
        company2 = customer_name
        period_start = f"01.{month:02d}.{year}"
        period_end = f"31.{month:02d}.{year}"
        saldo_start = 0.0
        saldo_end = filtered_summary[-1]['–î–æ–ª–≥'] if filtered_summary else 0.0
        
        return {
            "company1": company1,
            "company2": company2,
            "period_start": period_start,
            "period_end": period_end,
            "saldo_start": saldo_start,
            "saldo_end": saldo_end
        } 