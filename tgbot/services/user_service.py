from typing import List, Dict, Any, Optional
from loguru import logger
from tgbot.services.base_service import BaseService
from tgbot.models.models import TGUser
from tgbot.services.cache_service import cache_service


class UserService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    async def get_user_by_telegram_id(self, telegram_id: int) -> Optional[TGUser]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        return await self.safe_execute(
            "get_user_by_telegram_id",
            TGUser.get_user,
            self.db,
            telegram_id
        )
    
    async def update_user_phone(self, telegram_id: int, phone: str) -> Optional[TGUser]:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.safe_execute(
            "update_user_phone",
            TGUser.update_user,
            self.db,
            telegram_id,
            phone=phone
        )
    
    async def get_user_invoice(self, phone: str, month: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f"user_invoice_{phone}_{month}"
        return await self.get_cached_data(
            cache_key,
            lambda: TGUser.get_user_invoice(self.db, phone, month),
            ttl_seconds=600
        )
    
    async def get_user_reconciliation(self, phone: str, year: int, month: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cache_key = f"user_reconciliation_{phone}_{year}_{month}"
        return await self.get_cached_data(
            cache_key,
            lambda: TGUser.get_customer_sales_summary(self.db, phone, year, month),
            ttl_seconds=600
        )
    
    async def get_customer_name(self, phone: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        cache_key = f"customer_name_{phone}"
        return await self.get_cached_data(
            cache_key,
            lambda: TGUser.get_customer_name_by_phone(self.db, phone),
            ttl_seconds=3600
        )
    
    def format_reconciliation_summary(self, summary: List[Dict[str, Any]], phone: str, year: int, month: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏"""
        if not summary:
            return f"‚ùå –ó–∞ {month}/{year} –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        total_debt = sum(float(row.get('–î–æ–ª–≥', 0) or 0) for row in summary)
        total_sum = sum(float(row.get('–°—É–º–º–∞', 0) or 0) for row in summary)
        
        return (
            f"üìÑ <b>–ê–∫—Ç —Å–≤–µ—Ä–∫–∏ –∑–∞ {month}/{year}</b>\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{phone}</b>\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(summary)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{self.format_currency(total_sum)}</b>\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –¥–æ–ª–≥: <b>{self.format_currency(total_debt)}</b>\n\n"
            "üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª..."
        )
    
    def get_reconciliation_excel_params(self, customer_name: str, year: int, month: int, total_debt: float) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Excel —Ñ–∞–π–ª–∞ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏"""
        return {
            "company1": "AVTOLIDER",
            "company2": customer_name,
            "period_start": f"01.{month}.{year}",
            "period_end": f"31.{month}.{year}",
            "saldo_start": 0.0,
            "saldo_end": total_debt
        } 