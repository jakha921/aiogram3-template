import re
from pprint import pprint
import os

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from loguru import logger

from tgbot.keyboards.inline import user_menu_kb_inline, month_kb_inline
from tgbot.keyboards.reply import phone_number_kb
from tgbot.models.models import TGUser
from tgbot.states import GetPhone
from tgbot.misc.slope_tempalte import generate_invoice_excel

router = Router(name=__name__)


async def user_start(msg: types.Message, state: FSMContext):
    logger.info(f"User {msg.from_user.id} started the bot")

    # state clear
    if await state.get_state():
        await state.clear()

    user: TGUser = await TGUser.get_user(msg.bot.db, msg.from_user.id)
    print('user', user)
    print('user', user.phone)

    # check if user has phone number
    if not user.phone:
        await state.set_state(GetPhone.phone)
        await msg.answer("üìû –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                         "<b>–ü—Ä–∏–º–µ—Ä: 998901234567</b>",
                         )
    else:
        await msg.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {msg.from_user.full_name}!", reply_markup=await user_menu_kb_inline())


async def get_user_phone(msg: types.Message, state: FSMContext):
    logger.info(f"User {msg.from_user.id} send phone number")

    user_phone = msg.text
    print('user_phone', user_phone)

    # validate phone number
    if not user_phone:
        await msg.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                         "<b>–ü—Ä–∏–º–µ—Ä: 998901234567</b>",
                         reply_markup=await phone_number_kb())
        return

    if user_phone.isdigit() and len(user_phone) == 9:
        await msg.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã\n–ü—Ä–∏–º–µ—Ä: 998901234567")

    # set in standard format
    if re.match(r'^\+998\d{9}$', user_phone):
        # remove plus
        user_phone = user_phone[1:]
    elif re.match(r'^998\d{9}$', user_phone):
        user_phone = user_phone
    else:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä: 998901234567")
        return

    # clear state
    await state.clear()

    # remove btn phone number
    await msg.delete()
    # delete previous message
    await msg.bot.delete_message(msg.chat.id, msg.message_id - 1)

    # save phone number to db
    if user_phone:
        user = await TGUser.update_user(
            msg.bot.db,
            msg.from_user.id,
            phone=user_phone
        )
        await msg.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {user_phone}")

        await msg.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {msg.from_user.full_name}!", reply_markup=await user_menu_kb_inline())
    else:
        await msg.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start")


async def update_user_phone(call: types.CallbackQuery, state: FSMContext):
    logger.info(f"User {call.from_user.id} send {call.data}")

    await state.set_state(GetPhone.phone)
    await call.message.edit_text("üìû –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                                 "<b>–ü—Ä–∏–º–µ—Ä: 998901234567</b>",
                                 )


async def get_contact(call: types.CallbackQuery):
    logger.info(f"User {call.from_user.id} send {call.data}")
    contact_info = (
        "üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: –ü—Ä–∏–º–µ—Ä –ö–æ–º–ø–∞–Ω–∏–∏\n"
        "üìç –ê–¥—Ä–µ—Å: –ù–∞–≤–æ–∏, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +998930850955\n"
        "üåê –í–µ–±-—Å–∞–π—Ç: www.example.com\n"
        "üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: info@example.com\n"
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ú—ã —è–≤–ª—è–µ–º—Å—è –≤–µ–¥—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤ –æ—Ç—Ä–∞—Å–ª–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã."
    )
    await call.message.edit_text(contact_info)
    await call.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_menu_kb_inline())


async def get_months_btn(call: types.CallbackQuery):
    logger.info(f"User {call.from_user.id} send {call.data}")
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü üëá", reply_markup=await month_kb_inline())


async def get_main_menu(call: types.CallbackQuery):
    logger.info(f"User {call.from_user.id} send {call.data}")
    await call.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_menu_kb_inline())

async def get_user_invoice(call: types.CallbackQuery):
    logger.info(f"User {call.from_user.id} sent {call.data}")
    month = call.data.split('_')[-2]
    month_name = call.data.split('_')[-1]
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
    await call.message.edit_text(
        # replave month to month name
        f"üìÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—è—Ü:</b> {month_name}",
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç—É
    user: TGUser = await TGUser.get_user(call.bot.db, call.from_user.id)
    print('user', user.phone)
    print('month', month)
    res = await TGUser.get_user_invoice(call.bot.db, user.phone, month)
    # print('-' * 10)
    # pprint(res)

    if not res:
        await call.message.answer(
            "‚ùóÔ∏è <b>–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü —Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
        )
    else:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        # lines = []
        # for shop, code, name, dt, typ, qty, price, total, status in res:
        #     qty_str = str(int(qty)) if qty.is_integer() else str(qty)
        #     price_str = f"{price:,.0f}".replace(",", " ") + " —Å—É–º"
        #     total_str = f"{total:,.0f}".replace(",", " ") + " —Å—É–º"
        #     lines.append(
        #         f"üè¨ <b>{shop}</b>\n"
        #         f"üìã {name}\n"
        #         f"üïí {dt.strftime('%Y-%m-%d %H:%M:%S')}\n"
        #         f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty_str}\n"
        #         f"üíµ –¶–µ–Ω–∞: {price_str}\n"
        #         f"üí∞ –°—É–º–º–∞: {total_str}\n"
        #         "--------------------------------"
        #     )
        # text = (
        #     f"<b>üìë –°—á—ë—Ç –∑–∞ {month}:</b>\n\n" +
        #     "\n\n".join(lines)
        # )
        # await call.message.answer(text)
        
        wait = await call.message.answer(
            "üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª...",
            # reply_markup=await user_menu_kb_inline(),
        )
        
        # generate excel
        excel_path = await generate_invoice_excel(invoice_data=res, invoice_number=user.phone)
        print('excel_path', excel_path)

        # send excel file using FSInputFile
        excel_file = FSInputFile(excel_path)
        await call.message.answer_document(
            excel_file,
            caption=f"üìÑ –í–∞—à–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞—è –∑–∞ {month_name} –≥–æ—Ç–æ–≤–∞!"
        )
        # delete excel file
        if os.path.exists(excel_path):
            os.remove(excel_path)
        
        # delete message
        await wait.delete()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await call.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=await user_menu_kb_inline(),
    )


# async def get_invoice_excel(msg: types.Message):
#     logger.info(f"User {msg.from_user.id} sent {msg.text}")
#     await msg.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...")

#     try:
#         # get user
#         user: TGUser = await TGUser.get_user(msg.bot.db, msg.from_user.id)
#         print('user', user.phone)

#         # get invoice
#         res = await TGUser.get_user_invoice(msg.bot.db, user.phone, '12')
#         print('-' * 10)
#         pprint(res)

#         if not res:
#             await msg.answer("‚ùå –ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ –¥–µ–∫–∞–±—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
#             return

#         await msg.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª...")

#         # generate excel
#         excel_path = await generate_invoice_excel(invoice_data=res, invoice_number=user.phone)
#         print('excel', excel_path)

#         # send excel file using FSInputFile
#         excel_file = FSInputFile(excel_path)
#         await msg.answer_document(
#             excel_file,
#             caption="üìÑ –í–∞—à–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞—è –≥–æ—Ç–æ–≤–∞!"
#         )

#         # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
#         if os.path.exists(excel_path):
#             os.remove(excel_path)
            
#     except Exception as e:
#         logger.error(f"Error generating invoice: {e}")
#         await msg.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π: {str(e)}")

# register handlers
def register_users():
    router.message.register(
        user_start,
        F.text == "/start",
    )
    # router.message.register(
    #     get_invoice_excel,
    #     F.text == '/invoice'
    # )
    router.message.register(
        get_user_phone,
        GetPhone.phone
    )
    router.callback_query.register(
        update_user_phone,
        F.data == 'btn_register'
    )
    router.callback_query.register(
        get_contact,
        F.data == 'btn_contact'
    )
    router.callback_query.register(
        get_months_btn,
        F.data == 'btn_invoices'
    )
    router.callback_query.register(
        get_main_menu,
        F.data == 'btn_main_menu'
    )
    router.callback_query.register(
        get_user_invoice,
        F.data.startswith('btn_month_')
    )

    return router
