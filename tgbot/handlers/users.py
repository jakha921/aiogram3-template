import re
from pprint import pprint
import os

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from loguru import logger

from tgbot.keyboards.inline import user_menu_kb_inline, month_kb_inline, user_reconciliation_years_kb_inline, user_reconciliation_months_kb_inline, user_invoices_years_kb_inline, user_invoices_months_kb_inline
from tgbot.keyboards.reply import phone_number_kb
from tgbot.models.models import TGUser
from tgbot.states import GetPhone, UserReconciliationStates, UserInvoicesStates
from tgbot.misc.slope_tempalte import generate_invoice_excel, generate_reconciliation_act_excel
from tgbot.services.user_service import UserService

router = Router(name=__name__)


async def user_start(msg: types.Message, state: FSMContext):
    logger.info(f"User {msg.from_user.id} started the bot")

    # state clear
    if await state.get_state():
        await state.clear()

    user_service = UserService(msg.bot.db)
    user = await user_service.get_user_by_telegram_id(msg.from_user.id)
    print('user', user)
    print('user', user.phone)

    # check if user has phone number
    if not user.phone:
        await state.set_state(GetPhone.phone)
        await msg.answer("üìû –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                         "<b>–ü—Ä–∏–º–µ—Ä: 998901234567</b>",
                         )
    else:
        await msg.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {msg.from_user.full_name}!", reply_markup=await user_menu_kb_inline())


async def get_user_phone(msg: types.Message, state: FSMContext):
    logger.info(f"User {msg.from_user.id} send phone number")

    user_phone = msg.text
    print('user_phone', user_phone)

    # validate phone number
    if not user_phone:
        await msg.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                         "<b>–ü—Ä–∏–º–µ—Ä: 998901234567</b>",
                         reply_markup=await phone_number_kb())
        return

    if user_phone.isdigit() and len(user_phone) == 9:
        await msg.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã\n–ü—Ä–∏–º–µ—Ä: 998901234567")

    # set in standard format
    if re.match(r'^\+998\d{9}$', user_phone):
        # remove plus
        user_phone = user_phone[1:]
    elif re.match(r'^998\d{9}$', user_phone):
        user_phone = user_phone
    else:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä: 998901234567")
        return

    # clear state
    await state.clear()

    # remove btn phone number
    await msg.delete()
    # delete previous message
    await msg.bot.delete_message(msg.chat.id, msg.message_id - 1)

    # save phone number to db
    if user_phone:
        user_service = UserService(msg.bot.db)
        user = await user_service.update_user_phone(msg.from_user.id, user_phone)
        await msg.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {user_phone}")

        await msg.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {msg.from_user.full_name}!", reply_markup=await user_menu_kb_inline())
    else:
        await msg.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start")


async def update_user_phone(call: types.CallbackQuery, state: FSMContext):
    logger.info(f"User {call.from_user.id} send {call.data}")

    await state.set_state(GetPhone.phone)
    await call.message.edit_text("üìû –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                                 "<b>–ü—Ä–∏–º–µ—Ä: 998901234567</b>",
                                 )


async def get_contact(call: types.CallbackQuery):
    logger.info(f"User {call.from_user.id} send {call.data}")
    contact_info = (
        "üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: –ü—Ä–∏–º–µ—Ä –ö–æ–º–ø–∞–Ω–∏–∏\n"
        "üìç –ê–¥—Ä–µ—Å: –ù–∞–≤–æ–∏, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +998930850955\n"
        "üåê –í–µ–±-—Å–∞–π—Ç: www.example.com\n"
        "üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: info@example.com\n"
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ú—ã —è–≤–ª—è–µ–º—Å—è –≤–µ–¥—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤ –æ—Ç—Ä–∞—Å–ª–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã."
    )
    await call.message.edit_text(contact_info)
    await call.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_menu_kb_inline())


async def get_main_menu(call: types.CallbackQuery):
    logger.info(f"User {call.from_user.id} send {call.data}")
    await call.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_menu_kb_inline())


async def user_invoices_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"User {call.from_user.id} started invoices flow")
    await state.set_state(UserInvoicesStates.year)
    await call.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö:", reply_markup=await user_invoices_years_kb_inline())


async def user_reconciliation_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"User {call.from_user.id} started reconciliation flow")
    await state.set_state(UserReconciliationStates.year)
    await call.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏:", reply_markup=await user_reconciliation_years_kb_inline())


async def user_reconciliation_year(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    year = call.data.split('_')[-1]
    await state.update_data(user_recon_year=year)
    await state.set_state(UserReconciliationStates.month)
    
    logger.info(f"User {call.from_user.id} selected year: {year}")
    await call.message.edit_text(f"üìÖ –í—ã–±—Ä–∞–Ω –≥–æ–¥: {year}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", 
                                reply_markup=await user_reconciliation_months_kb_inline())


async def user_reconciliation_month(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    month = call.data.split('_')[-1]
    data = await state.get_data()
    year = data.get('user_recon_year')
    
    logger.info(f"User {call.from_user.id} selected month: {month} for year: {year}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_service = UserService(call.bot.db)
    user = await user_service.get_user_by_telegram_id(call.from_user.id)
    
    if not user.phone:
        await call.message.edit_text("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await call.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç —Å–≤–µ—Ä–∫–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        summary = await user_service.get_user_reconciliation(user.phone, int(year), int(month))
        
        if not summary:
            await call.message.edit_text(
                f"‚ùå –ó–∞ {month}/{year} –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=await user_reconciliation_months_kb_inline()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏
        header_text = user_service.format_reconciliation_summary(summary, user.phone, year, month)
        await call.message.edit_text(header_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        customer_name = await user_service.get_customer_name(user.phone)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Excel
        total_debt = sum(float(row.get('–î–æ–ª–≥', 0) or 0) for row in summary)
        excel_params = user_service.get_reconciliation_excel_params(customer_name, int(year), int(month), total_debt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏
        file_path = await generate_reconciliation_act_excel(
            act_data=summary,
            **excel_params
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        excel_file = FSInputFile(file_path)
        await call.message.answer_document(
            excel_file,
            caption=f"üìÑ –í–∞—à –∞–∫—Ç —Å–≤–µ—Ä–∫–∏ –∑–∞ {excel_params['period_start']} - {excel_params['period_end']} –≥–æ—Ç–æ–≤!"
        )
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.remove(file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await call.message.answer(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            reply_markup=await user_menu_kb_inline(),
        )
        
    except Exception as e:
        logger.error(f"Error generating user reconciliation: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏",
            reply_markup=await user_reconciliation_months_kb_inline()
        )


async def user_invoices_year(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –¥–ª—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    year = call.data.split('_')[-1]
    await state.update_data(user_invoice_year=year)
    await state.set_state(UserInvoicesStates.month)
    
    logger.info(f"User {call.from_user.id} selected year: {year}")
    await call.message.edit_text(f"üìÖ –í—ã–±—Ä–∞–Ω –≥–æ–¥: {year}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", 
                                reply_markup=await user_invoices_months_kb_inline())


async def user_invoices_month(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    month = call.data.split('_')[-1]
    data = await state.get_data()
    year = data.get('user_invoice_year')
    
    logger.info(f"User {call.from_user.id} selected month: {month} for year: {year}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_service = UserService(call.bot.db)
    user = await user_service.get_user_by_telegram_id(call.from_user.id)
    
    if not user.phone:
        await call.message.edit_text("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
    month_names = {
        "01": "–Ø–Ω–≤–∞—Ä—å", "02": "–§–µ–≤—Ä–∞–ª—å", "03": "–ú–∞—Ä—Ç", "04": "–ê–ø—Ä–µ–ª—å",
        "05": "–ú–∞–π", "06": "–ò—é–Ω—å", "07": "–ò—é–ª—å", "08": "–ê–≤–≥—É—Å—Ç",
        "09": "–°–µ–Ω—Ç—è–±—Ä—å", "10": "–û–∫—Ç—è–±—Ä—å", "11": "–ù–æ—è–±—Ä—å", "12": "–î–µ–∫–∞–±—Ä—å"
    }
    month_name = month_names.get(month, month)
    
    await call.message.edit_text(
        f"üìÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b> {month_name} {year}",
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—á–µ—Ç—É
    res = await user_service.get_user_invoice(user.phone, month)

    if not res:
        await call.message.answer(
            "‚ùóÔ∏è <b>–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü —Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
        )
    else:
        wait = await call.message.answer(
            "üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª...",
        )
        
        # generate excel
        excel_path = await generate_invoice_excel(invoice_data=res, invoice_number=user.phone)
        print('excel_path', excel_path)

        # send excel file using FSInputFile
        excel_file = FSInputFile(excel_path)
        await call.message.answer_document(
            excel_file,
            caption=f"üìÑ –í–∞—à–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞—è –∑–∞ {month_name} {year} –≥–æ—Ç–æ–≤–∞!"
        )
        # delete excel file
        if os.path.exists(excel_path):
            os.remove(excel_path)
        
        # delete message
        await wait.delete()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await call.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=await user_menu_kb_inline(),
    )


# register handlers
def register_users():
    router.message.register(
        user_start,
        F.text == "/start",
    )
    router.message.register(
        get_user_phone,
        GetPhone.phone
    )
    router.callback_query.register(
        update_user_phone,
        F.data == 'btn_register'
    )
    router.callback_query.register(
        get_contact,
        F.data == 'btn_contact'
    )
    router.callback_query.register(
        get_main_menu,
        F.data == 'btn_main_menu'
    )

    router.callback_query.register(
        user_reconciliation_start,
        F.data == 'btn_user_reconciliation'
    )
    router.callback_query.register(
        user_reconciliation_year,
        F.data.startswith('btn_user_recon_year_')
    )
    router.callback_query.register(
        user_reconciliation_month,
        F.data.startswith('btn_user_recon_month_')
    )
    router.callback_query.register(
        user_invoices_year,
        F.data.startswith('btn_user_invoice_year_')
    )
    router.callback_query.register(
        user_invoices_month,
        F.data.startswith('btn_user_invoice_month_')
    )
    router.callback_query.register(
        user_invoices_start,
        F.data == 'btn_user_invoices'
    )

    return router
