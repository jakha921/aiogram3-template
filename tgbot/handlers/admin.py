from typing import Any

from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loguru import logger
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tgbot.filters.admin import AdminFilter
from tgbot.models.models import TGUser
from tgbot.services.admin_service import AdminService
from tgbot.keyboards.factory import KeyboardFactory
from tgbot.states import AdminInvoicesFilter, ReconciliationActStates
from tgbot.misc.slope_tempalte import generate_invoice_excel, generate_reconciliation_act_excel
from aiogram.types import FSInputFile
import os

router = Router(name=__name__)


async def admin_start(msg: types.Message, state: FSMContext):
    logger.info(f"Admin {msg.from_user.id} started the bot")
    await state.clear()
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=KeyboardFactory.admin_menu())


async def admin_get_user_count(msg: types.Message):
    logger.info(f"Admin {msg.from_user.id} requested user count")
    admin_service = AdminService(msg.bot.db)
    users_count = await admin_service.get_users_count()
    await msg.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")


async def admin_menu(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    logger.info(f"Admin {call.from_user.id} opened admin menu")
    await state.clear()
    await call.message.edit_text("üëã –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=KeyboardFactory.admin_menu())


async def admin_invoices_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö - –≤—ã–±–æ—Ä –≥–æ–¥–∞"""
    logger.info(f"Admin {call.from_user.id} started invoices flow")
    await state.set_state(AdminInvoicesFilter.year)
    await call.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö:", reply_markup=KeyboardFactory.years_selection())


async def admin_year_selected(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    year = call.data.split('_')[-1]
    await state.update_data(selected_year=year)
    await state.set_state(AdminInvoicesFilter.month)
    
    logger.info(f"Admin {call.from_user.id} selected year: {year}")
    await call.message.edit_text(f"üìÖ –í—ã–±—Ä–∞–Ω –≥–æ–¥: {year}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", 
                                reply_markup=KeyboardFactory.months_selection())


async def admin_month_selected(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
    month = call.data.split('_')[-1]
    data = await state.get_data()
    year = data.get('selected_year')
    
    await state.update_data(selected_month=month)
    await state.set_state(AdminInvoicesFilter.invoices_list)
    
    logger.info(f"Admin {call.from_user.id} selected month: {month} for year: {year}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await call.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–µ...")
    
    try:
        admin_service = AdminService(call.bot.db)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        filtered_invoices = await admin_service.get_invoices_by_period(int(year), int(month))
        
        await state.update_data(filtered_invoices=filtered_invoices, current_page=0)
        
        if not filtered_invoices:
            await call.message.edit_text(
                f"‚ùå –ó–∞ {month}/{year} –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=KeyboardFactory.months_selection()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header_text = admin_service.format_invoice_summary(filtered_invoices, int(year), int(month))
        
        await call.message.edit_text(
            header_text,
            reply_markup=KeyboardFactory.invoices_list(filtered_invoices, page=0)
        )
        
    except Exception as e:
        logger.error(f"Error loading invoices: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö",
            reply_markup=KeyboardFactory.months_selection()
        )


async def admin_invoice_details(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π"""
    sales_id = int(call.data.split('_')[-1])
    
    logger.info(f"Admin {call.from_user.id} requested details for invoice: {sales_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await call.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π...")
    
    try:
        admin_service = AdminService(call.bot.db)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        details = await admin_service.get_invoice_details(sales_id)
        
        if not details:
            await call.message.edit_text(
                "‚ùå –î–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=KeyboardFactory.invoice_details(sales_id)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        full_text = admin_service.format_invoice_details(details, sales_id)
        
        await call.message.edit_text(
            full_text,
            reply_markup=KeyboardFactory.invoice_details(sales_id)
        )
        
    except Exception as e:
        logger.error(f"Error loading invoice details: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
            reply_markup=KeyboardFactory.invoice_details(0)
        )


async def admin_back_to_invoices_list(call: types.CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
    data = await state.get_data()
    filtered_invoices = data.get('filtered_invoices', [])
    current_page = data.get('current_page', 0)
    year = data.get('selected_year')
    month = data.get('selected_month')
    
    if not filtered_invoices:
        await call.message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –ø—É—Å—Ç", reply_markup=KeyboardFactory.months_selection())
        return
    
    admin_service = AdminService(call.bot.db)
    header_text = admin_service.format_invoice_summary(filtered_invoices, int(year), int(month))
    
    await call.message.edit_text(
        header_text,
        reply_markup=KeyboardFactory.invoices_list(filtered_invoices, page=current_page)
    )


async def admin_page_navigation(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
    page = int(call.data.split('_')[-1])
    data = await state.get_data()
    filtered_invoices = data.get('filtered_invoices', [])
    year = data.get('selected_year')
    month = data.get('selected_month')
    
    await state.update_data(current_page=page)
    
    admin_service = AdminService(call.bot.db)
    header_text = admin_service.format_invoice_summary(filtered_invoices, int(year), int(month))
    
    await call.message.edit_text(
        header_text,
        reply_markup=KeyboardFactory.invoices_list(filtered_invoices, page=page)
    )


async def admin_stats(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    logger.info(f"Admin {call.from_user.id} requested stats")
    await state.clear()
    
    try:
        admin_service = AdminService(call.bot.db)
        users_count = await admin_service.get_users_count()
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
            f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ\n"
            f"üì¶ –§—É–Ω–∫—Ü–∏–∏: –Ω–∞–∫–ª–∞–¥–Ω—ã–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        )
        
        await call.message.edit_text(stats_text, reply_markup=KeyboardFactory.admin_menu())
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=KeyboardFactory.admin_menu()
        )


async def admin_download_invoice(call: types.CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ"""
    sales_id = int(call.data.split('_')[-1])
    
    logger.info(f"Admin {call.from_user.id} downloading invoice: {sales_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await call.message.edit_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª...")
    
    try:
        admin_service = AdminService(call.bot.db)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        details = await admin_service.get_invoice_details(sales_id)
        
        if not details:
            await call.message.edit_text(
                "‚ùå –ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=KeyboardFactory.invoice_details(sales_id)
            )
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
        excel_data = []
        for item in details:
            excel_data.append((
                item['–ú–∞–≥–∞–∑–∏–Ω/–°–∫–ª–∞–¥'],      # company
                item['–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞'],         # code  
                item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],       # name
                item['–î–∞—Ç–∞/–í—Ä–µ–º—è'],         # date
                '–ü—Ä–æ–¥–∞–∂–∞',                  # operation
                item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],         # quantity
                item['–¶–µ–Ω–∞'],              # price
                item['–°—É–º–º–∞'],             # amount
                '–ü—Ä–æ–¥–∞–Ω–æ'                  # status
            ))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        excel_path = await generate_invoice_excel(
            invoice_data=excel_data, 
            invoice_number=f"ADM_{sales_id}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        excel_file = FSInputFile(excel_path)
        await call.message.answer_document(
            excel_file,
            caption=f"üìÑ –ù–∞–∫–ª–∞–¥–Ω–∞—è #{sales_id} –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(excel_path):
            os.remove(excel_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        await call.message.edit_text(
            "‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            reply_markup=KeyboardFactory.invoice_details(sales_id)
        )
        
    except Exception as e:
        logger.error(f"Error generating invoice Excel: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
            reply_markup=KeyboardFactory.invoice_details(sales_id)
        )


async def admin_reconciliation_menu(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(ReconciliationActStates.year)
    await call.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏:",
        reply_markup=KeyboardFactory.years_selection(prefix="recon_year_", back_callback="btn_admin_menu")
    )


async def admin_reconciliation_year(call: types.CallbackQuery, state: FSMContext):
    year = call.data.split('recon_year_')[-1]
    await state.update_data(recon_year=year)
    await state.set_state(ReconciliationActStates.month)
    await call.message.edit_text(
        f"üìÖ –ì–æ–¥: {year}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        reply_markup=KeyboardFactory.months_selection(prefix="recon_month_", back_callback="btn_admin_reconciliation_menu")
    )


async def admin_reconciliation_month(call: types.CallbackQuery, state: FSMContext):
    month = call.data.split('recon_month_')[-1]
    data = await state.get_data()
    year = int(data.get('recon_year'))
    await state.update_data(recon_month=month, customers_page=0)
    await state.set_state(ReconciliationActStates.confirm)
    admin_service = AdminService(call.bot.db)
    customers = await admin_service.get_customers_by_period(year, int(month))
    if not customers:
        await call.message.edit_text(
            f"‚ùå –ù–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ {month}/{year}",
            reply_markup=KeyboardFactory.months_selection(prefix="recon_month_", back_callback="btn_admin_reconciliation_menu")
        )
        return
    header = f"üë• <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∑–∞ {month}/{year}</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(customers)} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏:"
    await call.message.edit_text(
        header,
        reply_markup=KeyboardFactory.reconciliation_customers_list(customers, year, int(month), page=0),
        parse_mode="HTML"
    )


async def admin_reconciliation_customers_page(call: types.CallbackQuery, state: FSMContext):
    _, _, _, year, month, page = call.data.split('_')
    year, month, page = int(year), int(month), int(page)
    admin_service = AdminService(call.bot.db)
    customers = await admin_service.get_customers_by_period(year, month)
    header = f"üë• <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∑–∞ {month:02d}.{year}</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(customers)} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏:"
    await call.message.edit_text(
        header,
        reply_markup=KeyboardFactory.reconciliation_customers_list(customers, year, month, page=page),
        parse_mode="HTML"
    )


async def admin_reconciliation_customer(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç —Å–≤–µ—Ä–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)"""
    _, _, year, month, phone = call.data.split("_", 4)
    year, month = int(year), int(month)
    admin_service = AdminService(call.bot.db)
    summary = await admin_service.get_reconciliation_data(phone, year, month)
    if not summary:
        await call.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ –ø–æ —ç—Ç–æ–º—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é",
            reply_markup=KeyboardFactory.years_selection(prefix="recon_year_", back_callback="btn_admin_menu")
        )
        return
    customers = await admin_service.get_customers_by_period(year, month)
    customer = next((c for c in customers if c['phone'] == phone), None)
    customer_name = customer['name'] if customer else phone
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
    filtered_summary = admin_service.filter_reconciliation_data_by_period(summary, year, month)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ UX)
    text = admin_service.format_reconciliation_text(filtered_summary, customer_name, year, month, customer_phone=phone)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = KeyboardFactory.reconciliation_excel_download_kb(year, month, phone)
    await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")


async def admin_reconciliation_download_excel(call: types.CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)"""
    _, _, _, year, month, phone = call.data.split("_", 5)
    year, month = int(year), int(month)
    await call.message.edit_text("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏...")
    try:
        admin_service = AdminService(call.bot.db)
        summary = await admin_service.get_reconciliation_data(phone, year, month)
        customers = await admin_service.get_customers_by_period(year, month)
        customer = next((c for c in customers if c['phone'] == phone), None)
        customer_name = customer['name'] if customer else phone
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
        filtered_summary = admin_service.filter_reconciliation_data_by_period(summary, year, month)
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Excel
        params = admin_service.get_reconciliation_excel_params(customer_name, year, month, filtered_summary)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        file_path = await generate_reconciliation_act_excel(
            act_data=filtered_summary,
            **params
        )
        excel_file = FSInputFile(file_path)
        await call.message.answer_document(
            excel_file, 
            caption=f"üìÑ –ê–∫—Ç —Å–≤–µ—Ä–∫–∏ –∑–∞ {params['period_start']} - {params['period_end']} –¥–ª—è {customer_name}"
        )
        if os.path.exists(file_path):
            os.remove(file_path)
        await call.answer("‚úÖ –ê–∫—Ç —Å–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
    except Exception as e:
        logger.error(f"Error generating reconciliation Excel: {e}")
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏: {e}")


async def admin_reconciliation_back_customers(call: types.CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
    _, _, _, year, month = call.data.split("_", 4)
    year, month = int(year), int(month)
    
    admin_service = AdminService(call.bot.db)
    customers = await admin_service.get_customers_by_period(year, month)
    
    await call.message.edit_text(
        f"üìÖ –ì–æ–¥: {year}, –ú–µ—Å—è—Ü: {month}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏:",
        reply_markup=KeyboardFactory.act_customers(customers, year, month)
    )


# –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏
@router.message(Command("act_sverki"), AdminFilter())
async def act_sverki_start(message: types.Message):
    admin_service = AdminService(message.bot.db)
    years = await admin_service.get_sales_years()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=KeyboardFactory.act_years(years))

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
@router.callback_query(lambda c: c.data.startswith("act_year_"), AdminFilter())
async def act_sverki_choose_year(call: types.CallbackQuery, state: FSMContext):
    year = int(call.data.split("_")[-1])
    admin_service = AdminService(call.bot.db)
    months = await admin_service.get_sales_months(year)
    await call.message.edit_text(f"–ì–æ–¥: {year}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=KeyboardFactory.act_months(months, year))
    await state.update_data(act_year=year)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
@router.callback_query(lambda c: c.data.startswith("act_month_"), AdminFilter())
async def act_sverki_choose_month(call: types.CallbackQuery, state: FSMContext):
    _, _, year, month = call.data.split("_")
    year, month = int(year), int(month)
    admin_service = AdminService(call.bot.db)
    customers = await admin_service.get_customers_by_period(year, month)
    await call.message.edit_text(f"–ì–æ–¥: {year}, –ú–µ—Å—è—Ü: {month}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", reply_markup=KeyboardFactory.act_customers(customers, year, month))
    await state.update_data(act_month=month)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏
@router.callback_query(lambda c: c.data.startswith("act_customer_"), AdminFilter())
async def act_sverki_show(call: types.CallbackQuery, state: FSMContext):
    _, _, year, month, phone = call.data.split("_", 4)
    year, month = int(year), int(month)
    admin_service = AdminService(call.bot.db)
    summary = await admin_service.get_reconciliation_data(phone, year, month)
    customers = await admin_service.get_customers_by_period(year, month)
    customer = next((c for c in customers if c['phone'] == phone), None)
    customer_name = customer['name'] if customer else phone
    text = admin_service.format_reconciliation_text(summary, customer_name, year, month, customer_phone=phone)
    await call.message.edit_text(text, reply_markup=KeyboardFactory.act_download(year, month, phone), parse_mode="HTML")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏
@router.callback_query(lambda c: c.data.startswith("act_download_"), AdminFilter())
async def act_sverki_download(call: types.CallbackQuery, state: FSMContext):
    _, _, year, month, phone = call.data.split("_", 4)
    year, month = int(year), int(month)
    admin_service = AdminService(call.bot.db)
    summary = await admin_service.get_reconciliation_data(phone, year, month)
    customers = await admin_service.get_customers_by_period(year, month)
    customer = next((c for c in customers if c['phone'] == phone), None)
    customer_name = customer['name'] if customer else phone
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º summary –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    filtered_summary = [row for row in summary if hasattr(row['–î–∞—Ç–∞'], 'year') and row['–î–∞—Ç–∞'].year == year and row['–î–∞—Ç–∞'].month == month]
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
    company1 = "AVTOLIDER"
    company2 = customer_name
    period_start = f"01.{month:02d}.{year}"
    period_end = f"31.{month:02d}.{year}"
    saldo_start = 0.0
    saldo_end = filtered_summary[-1]['–î–æ–ª–≥'] if filtered_summary else 0.0
    
    file_path = await generate_reconciliation_act_excel(
        act_data=filtered_summary,
        company1=company1,
        company2=company2,
        period_start=period_start,
        period_end=period_end,
        saldo_start=saldo_start,
        saldo_end=saldo_end
    )
    try:
        await call.message.answer_document(FSInputFile(file_path), caption=f"–ê–∫—Ç —Å–≤–µ—Ä–∫–∏ –∑–∞ {period_start} - {period_end} –¥–ª—è {customer_name}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
    await call.answer("–ê–∫—Ç —Å–≤–µ—Ä–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)


# register handlers
def register_admin():
    router.message.register(
        admin_start,
        Command("admin"),
        AdminFilter()
    )
    router.message.register(
        admin_get_user_count,
        Command("stats"),
        AdminFilter()
    )
    
    # Admin callback handlers
    router.callback_query.register(
        admin_menu,
        F.data == "btn_admin_menu",
        AdminFilter()
    )
    router.callback_query.register(
        admin_invoices_start,
        F.data == "btn_admin_invoices",
        AdminFilter()
    )
    router.callback_query.register(
        admin_year_selected,
        F.data.startswith("btn_admin_year_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_month_selected,
        F.data.startswith("btn_admin_month_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_invoice_details,
        F.data.startswith("btn_admin_invoice_details_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_back_to_invoices_list,
        F.data == "btn_admin_back_to_list",
        AdminFilter()
    )
    router.callback_query.register(
        admin_page_navigation,
        F.data.startswith("btn_admin_page_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_stats,
        F.data == "btn_admin_stats",
        AdminFilter()
    )
    router.callback_query.register(
        admin_download_invoice,
        F.data.startswith("btn_admin_download_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_reconciliation_menu,
        F.data == "btn_admin_reconciliation_menu",
        AdminFilter()
    )
    router.callback_query.register(
        admin_reconciliation_year,
        F.data.startswith("recon_year_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_reconciliation_month,
        F.data.startswith("recon_month_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_reconciliation_customer,
        F.data.startswith("act_customer_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_reconciliation_download_excel,
        F.data.startswith("recon_download_excel_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_reconciliation_back_customers,
        F.data.startswith("recon_back_customers_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_reconciliation_customers_page,
        F.data.startswith("recon_customers_page_"),
        AdminFilter()
    )

    return router
