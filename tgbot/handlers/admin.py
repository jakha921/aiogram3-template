from typing import Any

from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loguru import logger

from tgbot.filters.admin import AdminFilter
from tgbot.models.models import TGUser
from tgbot.keyboards.inline import (
    admin_menu_kb_inline, 
    admin_years_kb_inline, 
    admin_months_kb_inline,
    admin_invoices_list_kb_inline,
    admin_invoice_details_kb_inline
)
from tgbot.states import AdminInvoicesFilter
from tgbot.misc.slope_tempalte import generate_invoice_excel
from aiogram.types import FSInputFile
import os

router = Router(name=__name__)


async def admin_start(msg: types.Message, state: FSMContext):
    logger.info(f"Admin {msg.from_user.id} started the bot")
    await state.clear()
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await admin_menu_kb_inline())


async def admin_get_user_count(msg: types.Message):
    logger.info(f"Admin {msg.from_user.id} requested user count")
    users_count = await TGUser.get_users_count(msg.bot.db)
    await msg.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")


async def admin_menu(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    logger.info(f"Admin {call.from_user.id} opened admin menu")
    await state.clear()
    await call.message.edit_text("üëã –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await admin_menu_kb_inline())


async def admin_invoices_start(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö - –≤—ã–±–æ—Ä –≥–æ–¥–∞"""
    logger.info(f"Admin {call.from_user.id} started invoices flow")
    await state.set_state(AdminInvoicesFilter.year)
    await call.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö:", reply_markup=await admin_years_kb_inline())


async def admin_year_selected(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    year = call.data.split('_')[-1]
    await state.update_data(selected_year=year)
    await state.set_state(AdminInvoicesFilter.month)
    
    logger.info(f"Admin {call.from_user.id} selected year: {year}")
    await call.message.edit_text(f"üìÖ –í—ã–±—Ä–∞–Ω –≥–æ–¥: {year}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", 
                                reply_markup=await admin_months_kb_inline())


async def admin_month_selected(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
    month = call.data.split('_')[-1]
    data = await state.get_data()
    year = data.get('selected_year')
    
    await state.update_data(selected_month=month)
    await state.set_state(AdminInvoicesFilter.invoices_list)
    
    logger.info(f"Admin {call.from_user.id} selected month: {month} for year: {year}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await call.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        invoices = await TGUser.get_all_sales_invoices_summary(call.bot.db)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É
        filtered_invoices = []
        for invoice in invoices:
            invoice_date = invoice['–î–∞—Ç–∞/–≤—Ä–µ–º—è']
            if invoice_date.year == int(year) and invoice_date.month == int(month):
                filtered_invoices.append(invoice)
        
        await state.update_data(filtered_invoices=filtered_invoices)
        
        if not filtered_invoices:
            await call.message.edit_text(
                f"‚ùå –ó–∞ {month}/{year} –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=await admin_months_kb_inline()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        total_sum = sum(invoice['–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏'] for invoice in filtered_invoices)
        header_text = (
            f"üì¶ <b>–ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ {month}/{year}</b>\n\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(filtered_invoices)} –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum:,.0f} —Å—É–º\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        
        await call.message.edit_text(
            header_text,
            reply_markup=await admin_invoices_list_kb_inline(filtered_invoices)
        )
        
    except Exception as e:
        logger.error(f"Error loading invoices: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö",
            reply_markup=await admin_months_kb_inline()
        )


async def admin_invoice_details(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π"""
    sales_id = int(call.data.split('_')[-1])
    
    logger.info(f"Admin {call.from_user.id} requested details for invoice: {sales_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await call.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        details = await TGUser.get_sales_document_details(call.bot.db, sales_id)
        
        if not details:
            await call.message.edit_text(
                "‚ùå –î–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=await admin_invoice_details_kb_inline(sales_id)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        first_item = details[0]
        header = (
            f"üìã <b>–ù–∞–∫–ª–∞–¥–Ω–∞—è #{sales_id}</b>\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {first_item['–ú–∞–≥–∞–∑–∏–Ω/–°–∫–ª–∞–¥']}\n"
            f"üìÖ –î–∞—Ç–∞: {first_item['–î–∞—Ç–∞/–í—Ä–µ–º—è'].strftime('%d.%m.%Y %H:%M')}\n\n"
            f"<b>üì¶ –¢–æ–≤–∞—Ä—ã:</b>\n"
        )
        
        items_text = []
        total_sum = 0
        
        for item in details:
            item_total = item['–°—É–º–º–∞']
            total_sum += item_total
            
            items_text.append(
                f"‚Ä¢ <b>{item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}</b>\n"
                f"  –ö–æ–¥: {item['–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞']}\n"
                f"  –ö–æ–ª-–≤–æ: {item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
                f"  –¶–µ–Ω–∞: {item['–¶–µ–Ω–∞']:,.0f} —Å—É–º\n"
                f"  –°—É–º–º–∞: {item_total:,.0f} —Å—É–º"
            )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(items_text) > 10:
            displayed_items = items_text[:10]
            displayed_items.append(f"\n... –∏ –µ—â–µ {len(items_text) - 10} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            displayed_items = items_text
        
        footer = f"\n\nüí∞ <b>–ò—Ç–æ–≥–æ: {total_sum:,.0f} —Å—É–º</b>"
        
        full_text = header + "\n\n".join(displayed_items) + footer
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
        if len(full_text) > 4000:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            short_items = items_text[:5]
            short_items.append(f"\n... –∏ –µ—â–µ {len(items_text) - 5} —Ç–æ–≤–∞—Ä–æ–≤")
            full_text = header + "\n\n".join(short_items) + footer
        
        await call.message.edit_text(
            full_text,
            reply_markup=await admin_invoice_details_kb_inline(sales_id)
        )
        
    except Exception as e:
        logger.error(f"Error loading invoice details: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
            reply_markup=await admin_invoice_details_kb_inline(0)
        )


async def admin_back_to_invoices_list(call: types.CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
    data = await state.get_data()
    filtered_invoices = data.get('filtered_invoices', [])
    year = data.get('selected_year')
    month = data.get('selected_month')
    
    if not filtered_invoices:
        await call.message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –ø—É—Å—Ç", reply_markup=await admin_months_kb_inline())
        return
    
    total_sum = sum(invoice['–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏'] for invoice in filtered_invoices)
    header_text = (
        f"üì¶ <b>–ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ {month}/{year}</b>\n\n"
        f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(filtered_invoices)} –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum:,.0f} —Å—É–º\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    await call.message.edit_text(
        header_text,
        reply_markup=await admin_invoices_list_kb_inline(filtered_invoices)
    )


async def admin_stats(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    logger.info(f"Admin {call.from_user.id} requested stats")
    await state.clear()
    
    try:
        users_count = await TGUser.get_users_count(call.bot.db)
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
            f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ\n"
            f"üì¶ –§—É–Ω–∫—Ü–∏–∏: –Ω–∞–∫–ª–∞–¥–Ω—ã–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        )
        
        await call.message.edit_text(stats_text, reply_markup=await admin_menu_kb_inline())
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=await admin_menu_kb_inline()
        )


async def admin_download_invoice(call: types.CallbackQuery, state: FSMContext):
    """–°–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ"""
    sales_id = int(call.data.split('_')[-1])
    
    logger.info(f"Admin {call.from_user.id} downloading invoice: {sales_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await call.message.edit_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        details = await TGUser.get_sales_document_details(call.bot.db, sales_id)
        
        if not details:
            await call.message.edit_text(
                "‚ùå –ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=await admin_invoice_details_kb_inline(sales_id)
            )
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel
        # –§–æ—Ä–º–∞—Ç –¥–ª—è generate_invoice_excel: (company, code, name, date, operation, quantity, price, amount, status)
        excel_data = []
        for item in details:
            excel_data.append((
                item['–ú–∞–≥–∞–∑–∏–Ω/–°–∫–ª–∞–¥'],      # company
                item['–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞'],         # code  
                item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],       # name
                item['–î–∞—Ç–∞/–í—Ä–µ–º—è'],         # date
                '–ü—Ä–æ–¥–∞–∂–∞',                  # operation
                item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],         # quantity
                item['–¶–µ–Ω–∞'],              # price
                item['–°—É–º–º–∞'],             # amount
                '–ü—Ä–æ–¥–∞–Ω–æ'                  # status
            ))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        excel_path = await generate_invoice_excel(
            invoice_data=excel_data, 
            invoice_number=f"ADM_{sales_id}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        excel_file = FSInputFile(excel_path)
        await call.message.answer_document(
            excel_file,
            caption=f"üìÑ –ù–∞–∫–ª–∞–¥–Ω–∞—è #{sales_id} –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(excel_path):
            os.remove(excel_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        await call.message.edit_text(
            "‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            reply_markup=await admin_invoice_details_kb_inline(sales_id)
        )
        
    except Exception as e:
        logger.error(f"Error generating invoice Excel: {e}")
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
            reply_markup=await admin_invoice_details_kb_inline(sales_id)
        )


# register handlers
def register_admin():
    router.message.register(
        admin_start,
        Command("admin"),
        AdminFilter()
    )
    router.message.register(
        admin_get_user_count,
        Command("stats"),
        AdminFilter()
    )
    
    # Admin callback handlers
    router.callback_query.register(
        admin_menu,
        F.data == "btn_admin_menu",
        AdminFilter()
    )
    router.callback_query.register(
        admin_invoices_start,
        F.data == "btn_admin_invoices",
        AdminFilter()
    )
    router.callback_query.register(
        admin_year_selected,
        F.data.startswith("btn_admin_year_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_month_selected,
        F.data.startswith("btn_admin_month_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_invoice_details,
        F.data.startswith("btn_admin_invoice_details_"),
        AdminFilter()
    )
    router.callback_query.register(
        admin_back_to_invoices_list,
        F.data == "btn_admin_back_to_list",
        AdminFilter()
    )
    router.callback_query.register(
        admin_stats,
        F.data == "btn_admin_stats",
        AdminFilter()
    )
    router.callback_query.register(
        admin_download_invoice,
        F.data.startswith("btn_admin_download_"),
        AdminFilter()
    )

    return router
