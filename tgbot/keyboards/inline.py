import uuid
from datetime import datetime

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


# back to role
async def back_to_role_kb_inline():
    """Back to role inline keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏èOrtga", callback_data="btn_back_role"))
    return keyboard.as_markup()


async def generate_kb_inline(buttons: list[dict], state):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ mapping:
    {doc_id: file_url}.
    –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç buttons –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict —Å –∫–ª—é—á–∞–º–∏:
      - "text": —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏,
      - "file": URL —Ñ–∞–π–ª–∞.
    """
    # print('-' * 10)
    # print('buttons', buttons)
    keyboard = InlineKeyboardBuilder()
    mapping = {}
    for btn in buttons:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        doc_id = f"ref_{uuid.uuid4().hex[:8]}"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å doc_id -> URL —Ñ–∞–π–ª–∞
        mapping[doc_id] = f"{btn['file']}|{btn['text'].split(' | ')[0]}"
        keyboard.add(InlineKeyboardButton(text=btn["text"], callback_data=doc_id))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏èOrtga", callback_data="btn_docs"))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (RedisStorage2 —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    await state.update_data(doc_mapping=mapping)
    return keyboard.adjust(1).as_markup()


# 12 month names for inline keyboard
async def month_kb_inline():
    """12 month names for inline keyboard"""
    keyboard = InlineKeyboardBuilder()
    months = {
        "01": "–Ø–Ω–≤",
        "02": "–§–µ–≤",
        "03": "–ú–∞—Ä",
        "04": "–ê–ø—Ä",
        "05": "–ú–∞–π",
        "06": "–ò—é–Ω",
        "07": "–ò—é–ª",
        "08": "–ê–≤–≥",
        "09": "–°–µ–Ω",
        "10": "–û–∫—Ç",
        "11": "–ù–æ—è",
        "12": "–î–µ–∫",
    }
    for month, short in months.items():
        keyboard.add(InlineKeyboardButton(text=short, callback_data=f"btn_month_{month}_{short}"))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="btn_main_menu"))

    return keyboard.adjust(3).as_markup()


async def user_menu_kb_inline():
    """
    User menu inline keyboard
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ù–∞–∫–ª–∞–¥–Ω–∞—è, –ö–æ–Ω—Ç–∞–∫—Ç
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="btn_register")),
    keyboard.add(InlineKeyboardButton(text="üì¶ –ù–∞–∫–ª–∞–¥–Ω—ã–µ", callback_data="btn_invoices")),
    keyboard.add(InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="btn_contact"))

    return keyboard.adjust(2).as_markup()


# Admin keyboards
async def admin_menu_kb_inline():
    """Admin main menu inline keyboard"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üì¶ –ù–∞–∫–ª–∞–¥–Ω—ã–µ", callback_data="btn_admin_invoices"))
    keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="btn_admin_stats"))
    
    return keyboard.adjust(1).as_markup()


async def admin_years_kb_inline():
    """Years selection for admin invoices filter"""
    keyboard = InlineKeyboardBuilder()
    current_year = datetime.now().year
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
    for year in range(current_year, current_year - 5, -1):
        keyboard.add(InlineKeyboardButton(text=str(year), callback_data=f"btn_admin_year_{year}"))
    
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_admin_menu"))
    return keyboard.adjust(2).as_markup()


async def admin_months_kb_inline():
    """Months selection for admin invoices filter"""
    keyboard = InlineKeyboardBuilder()
    months = {
        "01": "–Ø–Ω–≤–∞—Ä—å",
        "02": "–§–µ–≤—Ä–∞–ª—å", 
        "03": "–ú–∞—Ä—Ç",
        "04": "–ê–ø—Ä–µ–ª—å",
        "05": "–ú–∞–π",
        "06": "–ò—é–Ω—å",
        "07": "–ò—é–ª—å",
        "08": "–ê–≤–≥—É—Å—Ç",
        "09": "–°–µ–Ω—Ç—è–±—Ä—å",
        "10": "–û–∫—Ç—è–±—Ä—å",
        "11": "–ù–æ—è–±—Ä—å",
        "12": "–î–µ–∫–∞–±—Ä—å",
    }
    
    for month, name in months.items():
        keyboard.add(InlineKeyboardButton(text=name, callback_data=f"btn_admin_month_{month}"))
    
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_admin_invoices"))
    keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btn_admin_menu"))
    return keyboard.adjust(3).as_markup()


async def admin_invoices_list_kb_inline(invoices_data: list):
    """Generate keyboard for invoices list with pagination"""
    keyboard = InlineKeyboardBuilder()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    max_items = min(len(invoices_data), 10)
    
    for i, invoice in enumerate(invoices_data[:max_items]):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        invoice_text = f"üìã {invoice['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'][:20]}{'...' if len(invoice['–ü–æ–∫—É–ø–∞—Ç–µ–ª—å']) > 20 else ''} | {invoice['–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏']:,.0f} —Å—É–º"
        keyboard.add(InlineKeyboardButton(
            text=invoice_text, 
            callback_data=f"btn_admin_invoice_details_{invoice['–ö–æ–¥']}"
        ))
    
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_admin_invoices"))
    return keyboard.adjust(1).as_markup()


async def admin_invoice_details_kb_inline(sales_id: int):
    """Back button for invoice details with download option"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é", callback_data=f"btn_admin_download_{sales_id}"))
    keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö", callback_data="btn_admin_back_to_list"))
    
    return keyboard.adjust(1).as_markup()
